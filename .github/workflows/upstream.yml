#
# This is free software, lisence use MIT.
# 
# 
# <https://github.com/tzp001/packages>
#

name: Merge-upstream
on:
  push:
    paths:
      - '.github/workflows/upstream.yml'
      - '.gitignore'
      - '.github/diy/**'
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:
    inputs:
      ssh:
        description: 'ssh'
        required: false
        default: 'true'
  watch:
    types: started
  repository_dispatch:

jobs:
  merge:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: Ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - uses: de-vri-es/setup-git-credentials@v2
      with:
        credentials: https://tzp001:${{ secrets.TOKEN_PACKAGES_TZP001 }}@github.com/
    
    - name: Set git identity
      run : |
        git config --global user.email "145636057+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo timedatectl set-timezone "Asia/Shanghai"
        
    - name: Syn upstream
      run: |
        shopt -s extglob
        set +e
        git rm -r --cache * >/dev/null 2>&1 &
        rm -rf `find ./* -maxdepth 0 -type d ! -name ".github/diy"` >/dev/null 2>&1
        function git_clone() {
            git clone --depth 1 $1 $2
            if [ "$?" != 0 ]; then
                echo "error on $1"
                pid="$( ps -q $$ )"
                kill $pid
            fi
        }

        function git_sparse_clone() {
            trap 'rm -rf "$tmpdir"' EXIT
            #!/bin/sh
 
            REMOTE_URL="$2"
             
            if git ls-remote "$REMOTE_URL" > /dev/null 2>&1; then
                echo "远程仓库存在。"
            else
                echo "远程仓库不存在或无法访问。"
                return
            fi
            echo "$@"
            branch="$1" curl="$2" finaldir="$3" && shift 3
            rootdir="$PWD"
            tmpdir="$(mktemp -d)" || exit 1
            if [ ${#branch} -lt 10 ]; then
                git clone -b "$branch" --depth 1 --filter=blob:none --sparse -- "$curl" "$tmpdir"
                cd "$tmpdir"
            else
                git clone --filter=blob:none --sparse -- "$curl" "$tmpdir"
                cd "$tmpdir"
                git checkout $branch
            fi
            if [ "$?" != 0 ]; then
                echo "error on $curl"
                exit 1
            fi
            
            git sparse-checkout init --cone
            echo "$1"
            if [ "$1" == "*" ]; then
              echo "fadsfdsfasd"
              all_dir=$(git ls-tree -d HEAD --name-only | awk '{if(length != 0) print}')
              git sparse-checkout set "${all_dir[@]}"
            else
              git sparse-checkout set "$@"
            fi
            
            if [ "$finaldir" != "" ]; then
              mkdir -p $rootdir/$finaldir
            fi
            mv -n $@ $rootdir/$finaldir/ || true
            cd $rootdir
        }

        (
        git_sparse_clone master "https://github.com/fw876/helloworld" "HelloWorld" *
        git_sparse_clone master "https://github.com/kiddin9/openwrt-packages" "NAT-DDNS" luci-app-zerotier luci-app-aliddns \
        luci-app-ddnsto luci-app-ddns luci-app-tencentddns ddnsto luci-app-ddns-go ddns-go
        git_sparse_clone main "https://github.com/lwb1978/openwrt-gecoosac" "Gecoosac" gecoosac luci-app-gecoosac
        ) &
        (
        git_sparse_clone main "https://github.com/Siriling/5G-Modem-Support" "5G-Modem-Support" *
        ) &
        (
        git_sparse_clone master "https://github.com/vernesong/OpenClash" "HelloWorld" luci-app-openclash
        git_sparse_clone main "https://github.com/xiaorouji/openwrt-passwall2" "HelloWorld" luci-app-passwall2
        )
        
        
    # - name: Apply patches
    #   run: |
    #     find ".github/diy/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch" --batch 

    - name: Apply
      run: |
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        #去除子目录下的.github目录
        find ./ -name ".github" | grep -vx "./.github" | xargs rm -rf {} \;
        git add .
        git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
        for pkg in $(git diff-tree --no-commit-id --name-only HEAD); do
          if [ "$(grep "PKG_RELEASE" $pkg/Makefile)" ]; then
            sed -i "s/PKG_RELEASE:=.*/PKG_RELEASE:=$(git rev-list --count main $pkg)/" $pkg/Makefile || true
          fi
        done
        git reset --soft HEAD^
        git add .
        git commit -m "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} Sync $(date +%Y-%m-%d" "%H:%M:%S)"
        git push -f

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      continue-on-error: true
      with:
        retain_days: 1
        keep_minimum_runs: 3
